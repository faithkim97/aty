using UnityEngine;
using System.Collections;
#if UNITY_EDITOR
using UnityEditor;
using System.IO;
#endif
public class String : Node
{

    public string value = "Value :";
    public virtual string GetResult()
    {
        return value;
    }
    public override string Type() { return "String"; }
    public override string BaseType() { return "String"; }
#if UNITY_EDITOR
    string AssetName = "Var name";
    string directory = "";
    public override void DrawNode(int id = 0)
    {
        PrintValue();
        base.DrawNode(id);
    }
    protected virtual void PrintValue()
    {
        value = EditorGUILayout.TextArea(value);
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("Convert to Var"))
        {
            ConvertToVar();
        }
        AssetName = GUILayout.TextField(AssetName);
        GUILayout.EndHorizontal();
        GUILayout.BeginHorizontal();
        GUILayout.Label("Directory");
        directory = GUILayout.TextField(directory);
        GUILayout.EndHorizontal();
    }
    public void ConvertToVar()
    {
        StoryVariableString temp = CreateInstance<StoryVariableString>();
        temp.value = value;
        temp.name = AssetName;
        string ownerdir = "Assets/NodeEditor/StoryVariables/" + directory + "/";
        if (!Directory.Exists(ownerdir))
        {
            Directory.CreateDirectory(ownerdir);
        }
        ownerdir = ownerdir + temp.name + ".asset";
        if (!File.Exists(ownerdir))
        {
            AssetDatabase.CreateAsset(temp, ownerdir);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            temp = AssetDatabase.LoadAssetAtPath(ownerdir, typeof(StoryVariableString)) as StoryVariableString;
            StoryString node = CreateInstance<StoryString>();
            for (int i = 0; i < connectedTo.Count; i++)
            {
                attachNode = node;
                connectedTo[i].Attach();
                connectedTo[i].ReorderReferences(node, this);
                connectedTo[i].referencedBy.Remove(this);
            }
            for (int i = 0; i < referencedBy.Count; i++)
            {
                attachNode = referencedBy[i];
                Attach();
                connectedTo[i].ReorderConnections(node, this);
                referencedBy[i].connectedTo.Remove(this);
            }
            node.ID = parent.nodes.Count - 1;
            parent.nodes.Add(node);
            node.name = node.ID.ToString() + "-" + node.Type();
            node.variable = temp;
            node.pos.x = pos.x;
            node.pos.y = pos.y;
            node.parent = parent;
            Delete();
        }
        else
            Debug.LogError("Asset already exists");
    }
#endif
    public override void CopyTo(Node other)
    {
        base.CopyTo(other);
        String temp = (String)other;
        temp.value = value;
    }

}
