using UnityEngine;
using System.Collections;
#if UNITY_EDITOR
using UnityEditor;
#endif
public class ToString : String
{
    //check the type, convert it to a node, get it's value and return it as a string
    public override string GetResult()
    {
        if (referencedBy.Count >= 1)
        {
            switch (referencedBy[0].BaseType())
            {
                case "Bool":
                    Bool temp = referencedBy[0] as Bool;
                    return temp.GetResult().ToString();
                case "Float":
                    Float temp2 = referencedBy[0] as Float;
                    return temp2.GetResult().ToString();
                case "String":
                    String temp3 = referencedBy[0] as String;
                    return temp3.GetResult();
                default:
                    return "Wrong node type";
            }
        }
        else
        {
            return "No nodes connected";
        }
    }
    public override string Type() { return "To string"; }
    public override void Attach()
    {
        if (referencedBy.Count >= 1)
        {
            referencedBy[0].connectedTo.Remove(this);
            referencedBy.RemoveAt(0);
        }
        base.Attach();
    }
#if UNITY_EDITOR
    public override void DrawNode(int id = 0)
    {
        base.DrawNode(id);
    }
    protected override void PrintValue()
    {
        value = GetResult();
        GUILayout.BeginHorizontal();
        GUILayout.FlexibleSpace();
        GUILayout.Label(value);
        GUILayout.EndHorizontal();
    }
#endif
    public override void CopyTo(Node other)
    {
        base.CopyTo(other);
    }

}
