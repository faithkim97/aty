using UnityEngine;
using System.Collections;
#if UNITY_EDITOR
using UnityEditor;
#endif
/// <summary>
/// the generic node for dialogue 
/// used either for the player (OutPut) or the AI (Switch)
/// there's an option to attach a String node to this node, to replace the text with whatever's in the String node
/// </summary>
public class OutPut : Branch
{
    public String variable;
    public string Output;
    //optional audio clip in case you have voice acting
    //the dialogue reader doesn't actually play the audio, but hey, would you really want to waste your time putting the clip here yourself?
    public AudioClip AudioOutput;
    //the curve points to the string input, otherwise as usual
    public override Vector3 Left(Node node)
    {
        if (node == variable)
        {
            return new Vector3(pos.x, (2 * pos.y + 95) / 2, 0);
        }
        else

            return base.Left(node);
    }
    //if the string node isn't null, we calculate it's result, otherwise return whatever the value here is
    public virtual string GetOutput()
    {
        if (variable != null)
        {
            return variable.GetResult();
        }
        else
            return Output;
    }
    public override Node GetResult()
    {
        return base.GetResult();
    }
    public override string Type()
    {
        return "Output";
    }
    public override string BaseType()
    {
        return "Output";
    }
    public override void CopyTo(Node other)
    {
        OutPut temp = other as OutPut;
        temp.Output = Output;
        if (variable != null)
            temp.variable = temp.parent.nodes[variable.ID] as String;
        base.CopyTo(other);
    }
    public override void Attach()
    {
        //replace the input string if there is already one
        if (attachNode.BaseType() == "String")
        {
            if (variable != null)
            {
                variable.connectedTo.Remove(this);
            }
            variable = attachNode as String;
        }
        base.Attach();
    }
#if UNITY_EDITOR
    public override void DrawNode(int id = 0)
    {
        if (variable == null)
        {
            Output = EditorGUILayout.TextArea(Output);
        }
        else
        {
            Output = GetOutput();
            GUILayout.Label("Output: " + variable.name);
            GUILayout.Label(Output);
        }
        AudioOutput = EditorGUILayout.ObjectField("Optional audio", AudioOutput, typeof(AudioClip), true) as AudioClip;
        base.DrawNode(id);
    }
#endif
}
